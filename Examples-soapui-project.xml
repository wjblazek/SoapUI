<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="53c1cb42-7f10-4451-8bb7-0ef0edb1d15c" activeEnvironment="Default" name="SoapUI Examples Project" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="48ecfdd2-fe3a-4649-8e1e-ba72700ea293" wadlVersion="http://wadl.dev.java.net/2009/02" name="Portster API" type="rest" basePath="/portster/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>The Portster service will provide the service for porting telephone numbers in and out of Centurylink telephone numbering system, moniker.   The Dev server IP is 10.123.122.12.  The Production server IP is 10.122.65.19</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.122.65.19</con:endpoint></con:endpoints><con:resource name="/metrics" path="/metrics" id="13a3e164-1895-41c0-9fd4-cba096137244"><con:settings/><con:parameters/><con:method name="GET portster/v1/metrics" id="14c01afa-218d-4d8f-a37e-51a743b4a3c0" method="GET"><con:description>Displays Current Metrics.
Displays Current Metrics</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountName</con:name><con:style>HEADER</con:style><con:description>User Authorization</con:description></con:parameter><con:parameter required="true"><con:name>SeatId</con:name><con:style>HEADER</con:style><con:description>User Authorization</con:description></con:parameter><con:parameter><con:name>CorrelationId</con:name><con:style>HEADER</con:style><con:description>CorrelationId</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>408</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>503</con:status><con:params/></con:representation><con:request name="GET portster/v1/metrics" id="48d1ed7b-c6a1-4ee3-8412-e810b6a748d4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/portout/{service}" path="/portout/{service}" id="c58f9a5e-3f9f-4068-be4b-051499b9dc9e"><con:settings/><con:parameters/><con:method name="GET portster/v1/portout/{service}" id="1f8f62e4-1df4-4ea2-89bf-9e6c19153b91" method="GET"><con:description>GETs the portout data for given service, CVOIP or moniker
Provides portout service for CVOIP and moniker</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>service</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description>service- CVOIP or moniker</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>408</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>503</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403 502</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET portster/v1/portout/{service}" id="4b9dc904-d007-4b70-b905-c2edc383e441" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>service</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/version" path="/version" id="99b2f814-c958-411d-a91d-79c04a323eab"><con:settings/><con:parameters/><con:method name="GET Version" id="b3762fa8-3ed6-4d37-aa0a-0e9a75c2453c" method="GET"><con:description>Displays Current Version.
Displays Current Version</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountName</con:name><con:style>HEADER</con:style><con:description>User Authorization</con:description></con:parameter><con:parameter required="true"><con:name>SeatId</con:name><con:style>HEADER</con:style><con:description>User Authorization</con:description></con:parameter><con:parameter><con:name>CorrelationId</con:name><con:style>HEADER</con:style><con:description>CorrelationId</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>408</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET portser/v1/version" id="e6891545-3507-4a01-88a5-e59df0a4822c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="workingQxReport" path="admin/phoneNumbers/workingQxReport" id="e74db581-a64f-4ed3-96a8-bcdccbfd455d"><con:settings/><con:parameters/><con:method name="POST admin/phoneNumber/workingQxReport" id="6983814a-50a3-4b18-b3b0-72d98b9d39da" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST admin/phoneNumber/workingQxReport" id="6aedbb8d-5515-40bd-a07e-279363df9689" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="admin" path="admin" id="98d27e41-6658-4521-a7d8-2cbcb7baaf71"><con:settings/><con:parameters/><con:resource name="portout" path="portout/{tn}" id="9b84c20d-7f89-4698-8423-04ad150c2c3f"><con:settings/><con:parameters><con:parameter><con:name>tn</con:name><con:value>0</con:value><con:style>TEMPLATE</con:style><con:default>0</con:default></con:parameter></con:parameters><con:method name="POST /v1/admin/portout/{tn}" id="e74c2342-0d74-4d1c-9297-cbf04ba3416f" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 400 409</con:status><con:params/><con:element xmlns:por="http://10.122.65.19/portster/v1/admin/portout/">por:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:adm="http://nginx/portster/v1/portster/v1/admin">adm:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST /v1/admin/portout/{tn}" id="6f66db66-31a0-4307-8e03-142ed8d46956" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>tn</con:entry></con:parameterOrder></con:request></con:method><con:method name="PATCH /v1/admin/portout/{tn}" id="f025ddf5-b6a3-4ee1-bda5-25ef1d0caadb" method="PATCH"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 400</con:status><con:params/><con:element xmlns:ns="http://nginx/portster/v1/admin/portout/9876543210">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PATCH /v1/admin/portout/{tn}" id="e820353a-2b76-41a5-9995-931497ee69e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE /v1/admin/portout/{tn}" id="455e1e2f-a501-4365-b673-e689a0c858e0" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DELETE /v1/admin/portout/{tn}" id="fce5082e-d5a6-4af6-8678-c540ac8d5e26" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET /v1/admin/portout/{tn}" id="acf69b93-4b66-45e8-9ab3-56924688d9f9" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:adm="http://nginx/portster/v1/portster/v1/admin">adm:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:adm="http://nginx/portster/v1/portster/v1/admin">adm:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET /v1/admin/portout/{tn}" id="2663582c-4b23-4f6d-a096-8c31a1d002d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="portin" path="portin" id="f8f8e6a6-2b61-4d03-b636-fa1d51f39947"><con:settings/><con:parameters/><con:resource name="admin/portin/{corrid}" path="{corrid}" id="738d366b-86ea-42d7-a499-e2e10c74a301"><con:settings/><con:parameters><con:parameter><con:name>corrid</con:name><con:value>corrid</con:value><con:style>TEMPLATE</con:style><con:default>corrid</con:default></con:parameter></con:parameters><con:method name="DEL admin/portin/{corrid}" id="ee6d94a3-ed37-40e2-825e-3d1cb042f5d1" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:tem="http://nginx/portster/v1/admin/portin/tempcorrid">tem:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DEL admin/portin/{corrid}" id="d70c5414-9203-42ce-80c2-1ceb5b927182" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="corrid" value="${PortinSDCorrID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="GET admin/portin/{corrid}" id="88a088a0-89f8-4ede-a371-8425be898026" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 404</con:status><con:params/><con:element xmlns:f8b="http://nginx/portster/v1/admin/portin/f8b57a69d0074f8a9e4a0160a0a76685">f8b:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:a94="http://nginx/portster/v1/admin/portin/4877501648a944a8afd8324ca384bedc">a94:Response</con:element></con:representation><con:request name="GET admin/portin/{corrid}" id="85105702-935b-4394-867c-25172a62d14b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PATCH admin/portin/{corrid}" id="ec69d788-21a8-4546-a464-853db4c3b934" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 400</con:status><con:params/><con:element xmlns:cor="http://nginx/portster/v1/admin/portin/corrid">cor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PATCH admin/portin/{corrid}" id="e9787f70-80a6-4b74-adec-00ddbe60bcc3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="60b1a3b2-c7c9-48b5-956d-e09d852db49e" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="8fe0d8df-d635-414a-85e3-4d9c5b7a2478" mediaType="application/json"><con:settings/><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="GET v1/admin" id="41cf88e4-2932-437f-a80a-2b1a23abea64" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:adm="http://nginx/portster/v1/portster/v1/admin">adm:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="GET v1/admin" id="1ef4fe70-e417-466a-adc8-531198420266" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT v1/admin" id="10e3cdb8-280e-4000-90be-47240366a5a1" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="PUT v1/admin" id="ef966736-6b73-4558-9c0c-da6a40141532" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="v1/portin" path="/portin" id="69ffe453-7f96-4336-824d-2284da2894f8"><con:settings/><con:parameters/><con:resource name="check" path="check" id="003995dc-b646-4879-ab8a-ddd49ea352d0"><con:settings/><con:parameters/><con:method name="POST /v1/portin/check" id="da029d3b-1fd1-4279-8e7a-46bbd9e91d3a" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:chec="http://nginx/portster/v1/portin/check">chec:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:chec="http://nginx/portster/v1/portin/check">chec:Response</con:element></con:representation><con:request name="POST /v1/portin/check" id="dfdd56f9-f80d-4c9c-8df9-8252fb414e4c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request>{"tn":"3038090301"}</con:request><con:originalUri>http://nginx/portster/v1/portin/check</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="portster/v1/portin/check" id="3b6bd24e-dc9a-495a-8c14-7b9d8cd4f951" method="GET"><con:settings/><con:parameters/><con:request name="portster/v1/portin/check" id="a8aaf409-6bf0-4cdf-9947-27a2f3329226" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ESR" path="ESR" id="b42076c0-02a0-4c1b-939b-9d3232740ac3"><con:settings/><con:parameters/><con:method name="Method 1" id="bbb04b0f-64f2-4727-b0a3-55b3d450c4ff" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:request name="portster/v1/portin/ESR" id="e4ea4ca1-64ea-4011-b007-a91ab19b471e" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="9c9f5a8f-1238-41ba-9e00-eb747af2980d" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="c7fccc73-3126-4bc9-b793-e0e0dc7c0033" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST Portin" id="53643bc1-b404-4a53-931c-15e55d8ea4fa" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:por="http://nginx/portster/v1/portin">por:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST Portin" id="01206eff-0fc3-4921-88b5-b651afea3f22" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/portin/{service}" path="/portin/{service}" id="17d7ee45-be68-4a00-af71-43407a43234a"><con:settings/><con:parameters><con:parameter><con:name>service</con:name><con:value>service</con:value><con:style>TEMPLATE</con:style><con:default>service</con:default></con:parameter></con:parameters><con:resource name="/v1/portin/{service}/{resourceId}" path="{resourceId}" id="5f4ee5c5-d997-4706-8506-7ea1d69339fb"><con:settings/><con:parameters><con:parameter><con:name>resourceId</con:name><con:value>resourceId</con:value><con:style>TEMPLATE</con:style><con:default>resourceId</con:default></con:parameter></con:parameters><con:method name="/v1/portin/{service}/{resourceId}" id="ae2df9ff-093f-4098-9edd-22143f4bffea" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502 404</con:status><con:params/><con:element xmlns:f8b="http://nginx/portster/v1/portin/f8b57a69d0074f8a9e4a0160a0a76685">f8b:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:f8b="http://nginx/portster/v1/portin/f8b57a69d0074f8a9e4a0160a0a76685">f8b:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="/v1/portin/{service}/{resourceId}" id="11c1d8ef-3025-412f-ba0c-99fe0d01243d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.122.65.19</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/v1/portin/{service}/validated" path="validated" id="33ef86b8-4590-4017-9286-fcc12509641b"><con:settings/><con:parameters/><con:method name="POST /v1/portin/{service}/validated" id="62a61ac2-be36-40d0-9411-37716266e625" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200 202</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:val="http://nginx/portster/v1/portin/SD/validated">val:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST /v1/portin/{service}/validated" id="c13c68c9-612a-4166-b610-e5dee1c2f275" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST /portin/{service}" id="efe638e0-d696-4d63-b203-e5cf9f912655" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:por="http://nginx/portster/v1/portin">por:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>202</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>202</con:status><con:params/></con:representation><con:request name="POST /portin/{service}" id="c21583de-222c-4522-ab09-8bc60adddcbc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET /v1/portin/{resourceId}" id="f8f1cfd3-1a45-45aa-8580-cd090d213fbe" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>502</con:status><con:params/><con:element xmlns:f8b="http://nginx/portster/v1/portin/f8b57a69d0074f8a9e4a0160a0a76685">f8b:Fault</con:element></con:representation><con:request name="GET /v1/portin/{resourceId}" id="235338db-6a1c-4fd4-9c08-549ade529e14" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/v1/check/{tn}" path="/check/{tn}" id="261fe2ff-2fd5-40d1-a2b4-bdd676a64f56"><con:settings/><con:parameters><con:parameter><con:name>tn</con:name><con:value>tn</con:value><con:style>TEMPLATE</con:style><con:default>tn</con:default></con:parameter></con:parameters><con:method name="/v1/check/{tn}" id="3b428538-95be-4519-ae10-489f019ee9b3" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tn="http://nginx/portster/v1/check/tn">tn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:tn="http://nginx/portster/v1/check/tn">tn:Fault</con:element></con:representation><con:request name="/v1/check/{tn}" id="1aeae7bc-ac07-4b96-991c-05645252f42a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE /v1/check/{tn}" id="94bc016b-d28d-432b-a1fb-e84f3ecf6714" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:ns="http://10.122.65.19/portster/v1/check/3034032323">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="DELETE /v1/check/{tn}" id="b60343a9-f171-4643-b696-fa8ba77074f6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="286c3c56-7e2b-4bfc-be04-92771c2e2fcb" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://macbook-pro.dhcp.intranet:8089/</con:endpoint></con:endpoints><con:resource name="Version" path="/mockServer/version" id="ac6ffe1c-6b6f-4e42-b7f9-b54568af75f8"><con:settings/><con:parameters/><con:method name="Version" id="5821816c-e088-4985-bc56-722aca9c1ec0" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="37365398-8682-4aff-94b1-56593902775b" mediaType="application/json"><con:settings/><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="0e9aed6b-8ec5-4d42-9722-af11e841559e" name="Library" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6b050ac8-298a-43d1-93aa-c38a6facd978" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PortsterLibrary" searchProperties="true"><con:settings/><con:testStep type="groovy" name="PortsterLibrary_Results_Logger" id="b740ef21-bf92-4bb5-9773-604ccf6554bc"><con:settings/><con:config><script>//package dumpsterMedia.common

class portsterResultsLogger
{
 def log
 def context
 def testRunner
 // Class constructor with same case as Class name
 def portsterResultsLogger(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterResultsLogger.execute"
      log.info testRunner
      log.info context
      log.info "class portsterResultsLogger.execute(message) returning:"+message
      return message
 }

 def LogPortsterResults(results)
 {
      log.info "In class LogPortsterResults(results) method:  Create a results file and add results:"
      log.info testRunner
      log.info context
      log.info "LogPortsterResults(): results to log:" + results

      try {
		//Check a project level property to see if the reports should be produced.
		//  if(context.expand('${#Project#ProduceReports}') == 'true') {
		//    The path and file to persist results
		//    def resultDir = new File("/Users/vijaybhaskar/SOAPTEST_RESULTS/DUMPSTER_TESTS");

		def resultDir = new File("/var/log/soapui");
		if(!resultDir.exists()) {
			resultDir.mkdirs();
		}

		def currentDate = new Date().format("yyyy-MM-dd");
		def FileName = "results"
		def Fileext = ".csv"
		def TestResultsFile = "$FileName$Fileext"
		def resultsFile = new File(resultDir, "$TestResultsFile");
	 
		//If the file does not already exist, create it
		if(!resultsFile.exists()) {
			resultsFile.createNewFile();
		}

		// Add Column Headers for each new run
		//resultsFile.append('\n');
		//resultsFile.append('"TEST PROJECT","TEST SUITE","TEST NAME","TEST STEP","RESULT","DATE","TIME"');
		//resultsFile.append('\n');

		// Add the test results to the file
		def currentTime = new Date().format("HH:mm:ss");
		//def currentDateTime = new Date().format("yyyy-MM-dd hh:mm:ss");

		log.info "GV_LogPortsterResults: testRunner.results:" + testRunner.results

		for ( r in testRunner.results )
		{  
			//resultsFile.append('"' + testRunner.testCase.testSuite.project.name + '",'); //Test Suite Name
			//resultsFile.append('"' + testRunner.testCase.getTestSuite().name + '",'); //Test Suite Name
			//resultsFile.append('"' + testRunner.testCase.name + '",');                //Test Case Name
			//resultsFile.append('"' + r.getTestCase().getName() + '",');             //Test Case Name, Alt method
			//resultsFile.append('"' + r.getTestStep().getName() + '",');               //Test Case Step
			//resultsFile.append('"' + r.status + '",');    			              //Overall Test Case result
			//resultsFile.append('"' + r.getError() + '",');    			         //Overall Test Case result
			//resultsFile.append('"' + currentDateTime + '"');    			         //Date &amp; Time
			//resultsFile.append('"' + currentDate + '",');    			              //Date 
			//resultsFile.append('"' + currentTime + '"');    			              //Time
			//resultsFile.append('\n'); 

			resultsFile.append('"' + context.expand('${#Project#appName}') + '",');
			resultsFile.append('"' + context.expand('${#Project#appVersion}') + '",');
			resultsFile.append('"' + testRunner.testCase.getTestSuite().name + '",');    //Test Case Suite Name
		  	resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        		resultsFile.append('"' + r.getTestStep().getName() + '",');    //Test Case Name
        		resultsFile.append('"' + r.status + '",');    //Overall Test Case result
	   		resultsFile.append('"' + currentDate + '",');    // Test current Date
	   		resultsFile.append('"' + currentTime + '"');    // Test current Time
	   		resultsFile.append('\n'); 
	   		
		}

	} catch(e) {
		log.error("An error occurred: " + e.toString());
	}
 }
}

context.setProperty( "DMRL", new portsterResultsLogger( log, context, testRunner) )
log.info "Library Context:" + context

</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GET_admin-portout_validation" id="c8d6f3b5-59ea-4a27-9fe2-b0f3277344a1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterAdminPortoutValidation
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterAdminPortoutValidation(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterAdminPortoutValidation.execute"
      log.info testRunner
      log.info context
      log.info "class portsterAdminPortoutValidation.execute(message) returning:"+message
      return message
 }

 def ValidateAdminPortoutResults(results, apiType, method, tn, plat, on, status)
 {
      def i
      def foundTN = false
      log.info "In Library class ValidateAdminPortoutResults(results) method:"
      log.info testRunner
      log.info context
      log.info "ValidateAdminPortoutResults(): results to validate:" + results
      log.info "ValidateAdminPortoutResults(): apiType=" + apiType + "; method=" + method + "; tn=" + tn + "; plat=" + plat + "; Property deliverPlatform==" + context.testCase.getPropertyValue(plat) + "; on=" + on + "; status=" + status
	 
      try 
      {

		//def response = messageExchange.getResponse()
		//def response = messageExchange.responseContent
		//log.info "response="
		//log.info response

		//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
		//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

		//log.info "${response.status.responseCode} ${response.status.responseStatus}"
		log.info "ValidateAdminPortoutResults(): Getting new JsonSlurper()." 
		def slurper = new JsonSlurper()
		log.info "ValidateAdminPortoutResults(): slurper.parseText results."
		def jsonResponse = slurper.parseText results

		log.info "jsonResponse.portOuts=" + jsonResponse.portOuts
		//log.info "jsonResponse.portOuts[0]=" + jsonResponse.portOuts.[0]
		log.info "jsonResponse.totalCount=" + jsonResponse.totalCount
		assert jsonResponse.portOuts != null
		assert jsonResponse.totalCount != null
		//jsonResponse.totalCount = 1
		//log.info "jsonResponse.totalCount=" + jsonResponse.totalCount

		if (( jsonResponse.totalCount > 0 ) &amp;&amp; (tn != "")) 
		{

			log.info "jsonResponse.totalCount > 0.  Loop through results."
			for (i=0; i &lt; jsonResponse.totalCount; i++)
			{
				log.info "i=" + i 
				log.info "jsonResponse.portOuts.tn[" + i + "]==" + jsonResponse.portOuts.tn[i]
				log.info "jsonResponse.portOuts.orderNumber[" + i + "]=" + jsonResponse.portOuts.orderNumber[i]
				log.info "jsonResponse.portOuts.clientCount[" + i + "]=" + jsonResponse.portOuts.clientCount[i]
				log.info "jsonResponse.portOuts.deliveryPlatform[" + i + "]=" + jsonResponse.portOuts.deliveryPlatform[i]
				log.info "jsonResponse.portOuts.clientStatus[" + i + "]=" + jsonResponse.portOuts.clientStatus[i]
				log.info "jsonResponse.portOuts.clientTimeStamp[" + i + "]=" + jsonResponse.portOuts.clientTimeStamp[i]
				log.info "jsonResponse.portOuts.cnumCount[" + i + "]=" + jsonResponse.portOuts.cnumCount[i]
				log.info "jsonResponse.portOuts.cnumStatus[" + i + "]=" + jsonResponse.portOuts.cnumStatus[i]
				log.info "jsonResponse.portOuts.cnumTimeStamp[" + i + "]=" + jsonResponse.portOuts.cnumTimeStamp[i]
				
				if ( jsonResponse.portOuts.tn[i] == context.testCase.getPropertyValue(tn))
				{
					
					log.info "Found tn=" + context.testCase.getPropertyValue(tn)
					foundTN = true
					assert jsonResponse.portOuts.tn[i] == context.testCase.getPropertyValue(tn)
					assert jsonResponse.portOuts,orderNumber[i] == context.testCase.getPropertyValue(tn)
					assert jsonResponse.portOuts.clientCount[i] != null
					if (apiType == "admin")
					{
						assert jsonResponse.portOuts.deliveryPlatform[i] == context.testCase.getPropertyValue(plat)
						
						assert jsonResponse.portOuts.clientStatus[i] == status || jsonResponse.portOuts.clientStatus[i] == "success"
						assert jsonResponse.portOuts.clientTimeStamp[i] == null || jsonResponse.portOuts.clientTimeStamp[i] != null
						
						assert jsonResponse.portOuts.cnumStatus[i] == status || jsonResponse.portOuts.cnumStatus[i] == "success"
						assert jsonResponse.portOuts.cnumTimeStamp[i] == null || jsonResponse.portOuts.cnumTimeStamp[i] != null
						assert jsonResponse.portOuts.cnumCount[i] != null
						log.info "deliverPlatform==" + context.testCase.getPropertyValue(plat) + "; status=" + jsonResponse.portOuts.cnumStatus[i]	
					}	
					log.info "portOuts.[" + i + "]: tn==" + context.testCase.getPropertyValue(tn) + "; orderNumber==" + context.testCase.getPropertyValue(on)		

					if ( method == "DELETE" )
					{
						log.info "tn FOUND after DELETE:" + context.testCase.getPropertyValue(tn) + "; ERROR."
						return false
					}
					else
					{
						break;
					}
				}
			}
			if (foundTN == false)
			{
				if (method == "DELETE")
				{
					log.info "tn NOT FOUND AFTER DELETE:" + context.testCase.getPropertyValue(tn) + "; PASS."
				}
				else
				{
					log.info "tn NOT FOUND BEFORE DELTE:" + context.testCase.getPropertyValue(tn) + "; ERROR."
					return false
				}
			}
		}

		log.info "Pass."
		return true

	} catch(e) {
		log.error("ValidateAdminPortoutResults: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterAdminPortoutValidation( log, context, testRunner) )
log.info "Library Context:" + context

</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_POST_portin/check_validation" id="42917252-0827-4d66-86ee-b6dbd9d34228"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterPortinCheckValidation
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterPortinCheckValidation(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterPortinCheckValidation.execute"
      log.info testRunner
      log.info context
      log.info "class portsterPortinCheckValidation.execute(message) returning:"+message
      return message
 }

 def ValidatePortinCheckResponse(results, portable, inDays, provider, spid, rc, msg)
 {
      def i
      def foundTN = false
      log.info "In Library class ValidatePortinCheckResponse(results, ...) method:"
      log.info testRunner
      log.info context
      log.info "ValidatePortinCheckResponse(): results to validate:" + results
      log.info "ValidatePortinCheckResponse(): portable=" + portable + "; inDays=" + inDays + "; provider=" + provider + "; spid=" + spid + "; rc=" + rc + "; msg=" + msg
      try 
      {
		log.info "ValidatePortinCheckResponse(): Getting new JsonSlurper()." 
		def slurper = new JsonSlurper()
		log.info "ValidatePortinCheckResponse(): slurper.parseText results."
		def jsonResponse = slurper.parseText results
		log.info "jsonResponse.portable=" + jsonResponse.portable + "; portInDays=" + jsonResponse.portInDays + "; serviceProvider=" + jsonResponse.serviceProvider + "; spid=" + jsonResponse.spid + "; returnCode=" + jsonResponse.returnCode + "; errorMessage=" + jsonResponse.errorMessage
		
		if (portable == true)
		{
			assert jsonResponse.portable == portable
			assert jsonResponse.portInDays == inDays
			assert jsonResponse.serviceProvider == provider
			assert jsonResponse.spid == spid
			assert jsonResponse.returnCode == null
			assert jsonResponse.errorMessage == null
			log.info "jsonResponse.portable == true; PortInDays == serviceProvider == spid != null; returnCode == errorMessage == null  PASS."
		}
		else
		{
			assert jsonResponse.portable == portable
			assert jsonResponse.portInDays == null
			assert jsonResponse.serviceProvider == null
			assert jsonResponse.spid == null
			assert jsonResponse.returnCode == rc
			assert jsonResponse.errorMessage == msg
			log.info "jsonResponse.portable == false; PortInDays == serviceProvider == spid == null; returncode == errormessage != null.  PASS."
		}

		log.info "Pass."
		return true

	} catch(e) {
		log.error("ValidatePortinCheckResponse: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterPortinCheckValidation( log, context, testRunner) )
log.info "Library Context:" + context

</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GenerateOrderTN" id="68a60b5e-0d30-46ac-a986-51afc7b809cd"><con:settings/><con:config><script>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterGenerateOrderTN
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterGenerateOrderTN(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterGenerateOrderTN.execute"
      log.info testRunner
      log.info context
      log.info "class portsterGenerateOrderTN.execute(message) returning:"+message
      return message
 }

 def GenerateOrderTN(npa, nxx)
 {

	def TNA = 4045225000
	int range = 5000
	//def npa = 404
	//def nxx = 522
	def partone
	def orderTn
     
     log.info "In Library class portsterGenerateOrderTN(" + npa + ", " + nxx + ")"
     log.info testRunner
     log.info context
     try 
     {

		def randomInterval = new Random().nextInt(range)
		def TNB = TNA.plus(randomInterval)

		def parttwo = TNB.toString()
		def partthree
		partone = npa + "-" + nxx
		log.info "part one is " + partone
		log.info "TN a is " + TNA
		log.info "TN b is " + TNB
		
		log.info parttwo.substring(6,10).toString()
		partthree = parttwo.substring(6,10).toString()
		log.info partthree
		orderTn = partone + "-" + partthree
		log.info "Final orderTn is " + orderTn
		return orderTn

	} catch(e) {
		log.error("portsterGenerateOrderTN: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterGenerateOrderTN( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GenerateDate" id="d6d7d96b-f91d-447f-ace4-397976d796a2"><con:settings/><con:config><script>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterGenerateDate
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterGenerateDate(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterGenerateDate.execute"
      log.info testRunner
      log.info context
      log.info "class portsterGenerateDate.execute(message) returning:"+message
      return message
 }

 def GenerateDate()
 {  
     log.info "In Library class portsterGenerateDate()"
     log.info testRunner
     log.info context
     try 
     {

		def startDate = new Date() 
		def DDD = startDate.format("yyyy-MM-dd")
		log.info(startDate.format("yyyy-MM-dd"))

		log.info "Date is " + DDD
		return DDD

	} catch(e) {
		log.error("portsterGenerateDate: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterGenerateDate( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GeneratePONDate" id="53aae9c6-a7fa-422e-852f-1c3d54b9f265"><con:settings/><con:config><script>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterGeneratePONDate
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterGeneratePONDate(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterGeneratePONDate.execute"
      log.info testRunner
      log.info context
      log.info "class portsterGeneratePONDate.execute(message) returning:"+message
      return message
 }

 def GeneratePONDate()
 {  
     log.info "In Library class portsterGeneratePONDate()"
     log.info testRunner
     log.info context
     try 
     {

		def startDate = new Date() 
		def PONDate = startDate.format("yyMMdd")
		log.info(startDate.format("yyMMdd"))

		log.info "Date is " + PONDate
		return PONDate

	} catch(e) {
		log.error("portsterGeneratePONDate: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterGeneratePONDate( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GenerateTomorrowsDate" id="f7525279-bb03-4561-9110-10971383b614"><con:settings/><con:config><script>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterGenerateTomorrowsDate
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterGenerateTomorrowsDate(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterGenerateTomorrowsDate.execute"
      log.info testRunner
      log.info context
      log.info "class portsterGenerateTomorrowsDate.execute(message) returning:"+message
      return message
 }

 def GenerateTomorrowsDate()
 {  
     log.info "In Library class portsterGenerateTomorrowsDate()"
     log.info testRunner
     log.info context
     try 
     {

		def startDate = new Date() 
		def date = startDate.format("yyyy-MM-dd")
		log.info (startDate.format("yyyy-MM-dd"))
		log.info "Current Date is " + date

		def tomorrowsDate = startDate.next().format("yyyy-MM-dd")
		log.info "tomorrowsDate is " + tomorrowsDate
		
		return tomorrowsDate

	} catch(e) {
		log.error("portsterGenerateTomorrowsDate: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterGenerateTomorrowsDate( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GenerateTomorrowsISO87601DateTime" id="d48ea72c-4b15-4986-8d2e-397ee580e01d"><con:settings/><con:config><script>
//import com.eviware.soapui.support.XmlHolder
//import groovy.json.JsonSlurper 

//class GenerateTomorrowsISO8601DateTime
//{
// def log
// def context
// def testRunner
 
 // Class constructor with same case as Class name
// def GenerateTomorrowsISO8601DateTime(logIn,contextIn,testRunnerIn)
// {
//  this.log = logIn
//  this.context = contextIn
//  this.testRunner = testRunnerIn
// }

// def execute(message)
// {
//      // do some stuff to prove I've run with right context, etc.
//      log.info "In GenerateTomorrowsISO8601DateTime.execute"
//      log.info testRunner
//      log.info context
//      log.info "class GenerateTomorrowsISO8601DateTime.execute(message) returning:"+message
//      return message
// }

// def GenerateTomorrowsISO8601DateTime()
// {  
//     log.info "In Library class GenerateTomorrowsISO8601DateTime()"
//     log.info testRunner
//     log.info context
//     try 
//     {

//		def startDate = new Date() 
		//def DateTime = startDate.format("yyyy-MM-dd")
		//log.info (startDate.format("yyyy-MM-dd"))
		//log.info "Current Date is " + DateTime

//		def tomorrowsISO8601DateTime = startDate.next().format("yyyy-MM-dd")
//		log.info "tomorrowsISO8601DateTime is " + tomorrowsISO8601DateTime
		
		//return tomorrowsISO8601DateTime

//	} catch(e) {
//		log.error("GenerateTomorrowsISO8601DateTime: An error occurred: " + e.toString());
//		return false
//	}
// }
//}

//context.setProperty( "DMRL", new GenerateTomorrowsISO8601DateTime( log, context, testRunner) )
//log.info "Library Context:" + context




import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class GenerateTomorrowsISO8601DateTime
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def GenerateTomorrowsISO8601DateTime(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In GenerateTomorrowsISO8601DateTime.execute"
      log.info testRunner
      log.info context
      log.info "class GenerateTomorrowsISO8601DateTime.execute(message) returning:"+message
      return message
 }

 def GenerateTomorrowsISODateTime()
 {  
     log.info "In Library class GenerateTomorrowsISO8601DateTime()"
     log.info testRunner
     log.info context
     try 
     {

		def startDate = new Date() 
		def date = startDate.format("yyyy-MM-dd'T'hh:MM:ss'Z'")
		log.info (startDate.format("yyyy-MM-dd'T'hh:MM:ss'Z'"))
		log.info "Current Date is " + date

		def tomorrowsDateTime = startDate.next().format("yyyy-MM-dd'T'hh:MM:ss.dddddd'+00:00'")
		log.info "tomorrowsDate is " + tomorrowsDateTime
		
		return tomorrowsDateTime

	} catch(e) {
		log.error("GenerateTomorrowsISO8601DateTime: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new GenerateTomorrowsISO8601DateTime( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GenerateRandomOrderID" id="edf367c4-0b60-48b4-b680-94bd097badb9"><con:settings/><con:config><script>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

class portsterGenerateRandomOrderID
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterGenerateRandomOrderID(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterGenerateRandomOrderID.execute"
      log.info testRunner
      log.info context
      log.info "class portsterGenerateRandomOrderID.execute(message) returning:"+message
      return message
 }

 def GenerateRandomOrderID()
 {  
     log.info "In Library class portsterGenerateRandomOrderID()"
     log.info testRunner
     log.info context
     try 
     {
		def TNA = 9999995000
		int range = 5000
		def orderID
		def randomInterval = new Random().nextInt(range)
		def TNB = TNA.plus(randomInterval)

		log.info "TN a is " + TNA
		log.info "TN b is " + TNB
		orderID = "CTL" + TNB
		log.info "orderID is " + orderID
		return orderID

	} catch(e) {
		log.error("portsterGenerateRandomOrderID: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterGenerateRandomOrderID( log, context, testRunner) )
log.info "Library Context:" + context</script></con:config></con:testStep><con:testStep type="groovy" name="PortsterLibrary_GET_ESRCallback_validation" id="9f073c20-9351-47db-b385-5faec63b22b9"><con:settings/><con:config><script><![CDATA[import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 
import java.util.regex

class portsterESRCallbackValidation
{
 def log
 def context
 def testRunner
 
 // Class constructor with same case as Class name
 def portsterESRCallbackValidation(logIn,contextIn,testRunnerIn)
 {
  this.log = logIn
  this.context = contextIn
  this.testRunner = testRunnerIn
 }

 def execute(message)
 {
      // do some stuff to prove I've run with right context, etc.
      log.info "In portsterESRCallbackValidation.execute"
      log.info testRunner
      log.info context
      log.info "class portsterESRCallbackValidation.execute(message) returning:"+message
      return message
 }

 def ValidateESRCallback(results, resourceId, event)
 {
      def i
      def foundTN = false
      log.info "In Library class portsterESRCallbackValidation(results) method:"
      log.info "testRunner:" + testRunner
      log.info "context:" + context
      log.info "portsterESRCallbackValidation(): resourceId=" + resourceId + ", event=" + event
      log.info "portsterESRCallbackValidation(): results to validate:" + results
	 
      try 
      {
		//log.info "portsterESRCallbackValidation(): Getting new JsonSlurper()." 
		//def slurper = new JsonSlurper()
		//log.info "portsterESRCallbackValidation(): slurper.parseText results."
		//def jsonResponse = slurper.parseText results
		//log.info "jsonResponse=" + jsonResponse

		switch (event)
		{
			case "preval_successful":
				log.info "In case: preval_successful; results=" + results + "."
				assert "new" in results
				log.info "In case: Found new"
				assert event in $results;
				//assert "<Event>preval_successful<\\/Event>" in results;
				assert !("<Event>csr_submitted<\\/Event>" in results);
				break;
			case "csr_submitted":
				log.info "In case: csr_submitted"
				assert "<Event>new<\\/Event>" in results;
				assert "<Event>preval_successful<\\/Event>" in results;
				assert "<Event>csr_submitted<\\/Event>" in results;
				break;
		}

		log.info "portsterESRCallbackValidation Pass."
		return true

	} catch(e) {
		log.error("portsterESRCallbackValidation: An error occurred: " + e.toString());
		return false
	}
 }
}

context.setProperty( "DMRL", new portsterESRCallbackValidation( log, context, testRunner) )
log.info "Library Context:" + context

]]></script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="193fda52-530b-4c08-8b14-5ad547fc72f9" name="Example TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ddaba0ed-eb31-429e-8952-3c688b95e551" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Example TestCase 1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GV_Example_Project_Property_Incremented" id="2dc5e0f6-f87f-47c9-b4a6-162ada38e14b"><con:settings/><con:config><script>import com.eviware.soapui.SoapUI
import groovy.json.JsonSlurper 

//import com.eviware.soapui.model.testsuite
//import com.eviware.soapui.support.GroovyUtils(context)

//def responseFeedme = testRunner.testCase.getTestStepByName("GET feedme REST Request 2").getPropertyValue("response")
//log.info "responseFeedme=" + responseFeedme

//def slurper = new JsonSlurper()
//def jsonResponse = slurper.parseText responseFeedme

//log.info "jsonResponse.totalCount=" + jsonResponse.totalCount
//assert jsonResponse.totalCount != null
//log.info "jsonResponse.totalCount != null.  PASS."

//projectTotalCount = testRunner.testCase.testSuite.project.getPropertyValue("totalCount")
projectTotalCount = context.expand('${#Project#totalCount}')
log.info "Project property totalCount = $projectTotalCount"

newTotalCount = projectTotalCount.toInteger() + 1
log.info "newTotalCount =" +  newTotalCount
//assert jsonResponse.totalCount == (projectTotalCount + 1)
log.info "jsonResponse.totalCount == (projectTotalCount + 1)"
log.info "PASS."

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fa7519b2-f216-45bb-be96-25635f108be3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Example Test Case 2 - Conditional Test Steps - Common LIbrary Functions" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description/><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Portin SD Properties" id="bb74e8c8-47e2-4f1a-b6f8-9c148c873ff8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>PortinSDTN1</con:name><con:value>407-208-8831</con:value></con:property><con:property><con:name>PortinSDDate</con:name><con:value>2016-11-10</con:value></con:property><con:property><con:name>PortinSDOrderID1</con:name><con:value>CTL9999995274</con:value></con:property><con:property><con:name>PortinSDTN1CorrID</con:name><con:value>72954487fd7e40c28d2868f0822ddf2b</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="GV_GetDate" id="db11ea0f-4d3b-41c5-89f5-b6784bf27549"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]
log.info "Got Library"

// find the module within the library 
module = library.testCases["PortsterLibrary"].testSteps["PortsterLibrary_GenerateDate"]
log.info "Got Module "

// initialise the library; which places an instance in the context
module.run(testRunner, context)
log.info "Initialized Library"

// get the instance from the context.
def dLibrary = context.DMRL
log.info "Got instance of library code from the context:" + dLibrary

// Get a new Order TN
newDate = dLibrary.GenerateDate()
log.info " newDate=" + newDate
return newDate
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer Date" id="1a2ef282-ae01-4028-8acc-5361b12bf1f9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>Date</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GV_GetDate</con:sourceStep><con:targetType>PortinSDDate</con:targetType><con:targetStep>Portin SD Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GV_GetOrderTN_1" id="edfdf19e-60a6-4816-8908-0dd79ef7f3a5"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]
log.info "Got Library"

// find the module within the library 
module = library.testCases["PortsterLibrary"].testSteps["PortsterLibrary_GenerateOrderTN"]
log.info "Got Module "

// initialise the library; which places an instance of portsterResultsLogger in the context
module.run(testRunner, context)
log.info "Initialized Library"

// get the instance of portsterResultsLogger from the context.
def dLibrary = context.DMRL
log.info "Got instance of library code from the context:" + dLibrary

// Get a new Order TN
newTn = dLibrary.GenerateOrderTN(407, 208)
log.info " newTN=" + newTn

// Return a specific ATT Test number
//newTn = "501-771-9111"
//log.info " newTN=" + newAttTn

return newTn
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer TN1" id="6aabe8a4-3575-4909-8682-5c97137ab70b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TN1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GV_GetOrderTN_1</con:sourceStep><con:targetType>PortinSDTN1</con:targetType><con:targetStep>Portin SD Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GV_GetRandomOrderID1" id="6762ddf4-55dd-48b3-8b91-46ea2edeee66"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]
log.info "Got Library"

// find the module within the library 
module = library.testCases["PortsterLibrary"].testSteps["PortsterLibrary_GenerateRandomOrderID"]
log.info "Got Module "

// initialise the library; which places an instance in the context
module.run(testRunner, context)
log.info "Initialized Library"

// get the instance from the context.
def dLibrary = context.DMRL
log.info "Got instance of library code from the context:" + dLibrary

// Get a new Order TN
newOrderID = dLibrary.GenerateRandomOrderID()
log.info " newOrderID=" + newOrderID
return newOrderID
</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer OrderID1" id="bfaa0396-a40c-4bba-909f-d7511a6804c9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderID</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GV_GetRandomOrderID1</con:sourceStep><con:targetType>PortinSDOrderID1</con:targetType><con:targetStep>Portin SD Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST Portin/SD Request 1" id="f22245ad-fefb-4c56-8429-533eb5c1fa4a"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}" methodName="POST /portin/{service}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST Portin/SD Request 1" id="77accbcb-e5bb-4122-9555-2bbaccdf7092" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request>{"orderId":"${PortinSDOrderID1}", "authName":"Mickey Mouse", "orderTn":"${PortinSDTN1}", "portTn":"${PortinSDTN1}", "onSPAcctNo":"9999-3456-9876", "desiredDueDate":"2016-10-01", "sano":"700","sasn":"W. Mineral Ave.", "city":"Littleton", "state":"CO", "zip":"80120", "name":"Bruce Hitchcock"}</con:request><con:originalUri>http://nginx/portster/v1/portin</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7d8db395-a705-4800-a9f2-725891a8aa54" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="${#TestSuite#service1}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST Portin/SD Request 3-diff field order 2" id="81b3bf82-8bdf-4909-bd5b-a1bb25efe5f9" disabled="true"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}" methodName="POST /portin/{service}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST Portin/SD Request 3-diff field order 2" id="77accbcb-e5bb-4122-9555-2bbaccdf7092" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request>{"orderTN":"${PortinSDTN3}", "portTn":"${PortinSDTN3}", "onSPAcctNo":"9999-3456-9876", "desiredDueDate":"${PortinSDDate}", "sano":"700","sasn":"W. Mineral Ave.", "city":"Littleton", "state":"CO", "zip":"80120", "name":"Bruce Hitchcock", "orderId":"${PortinSDOrderID3}", "authName":"Mickey Mouse"}
</con:request><con:originalUri>http://nginx/portster/v1/portin</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7d8db395-a705-4800-a9f2-725891a8aa54" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="service" value="${#TestSuite#service1}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_Get_CorrelationId_1" id="c99ef0fd-ee7f-4b26-9116-82eca0c3401c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
//import com.eviware.soapui.support.GroovyUtils(context)
import groovy.json.JsonSlurper 

def headerCorrIdValue = testRunner.testCase.getTestStepByName("POST Portin/SD Request 1").httpRequest.response.responseHeaders["CorrelationId"].toString()
log.info "CorrelationId=$headerCorrIdValue"

def headerCorrIdTrimmedValue = headerCorrIdValue.substring(1,33).toString()

//partString = headerLocationValue.substring(headerLocationValue.indexOf("sms/")+8).toString()
log.info "CorrelationId=" + headerCorrIdTrimmedValue

return headerCorrIdTrimmedValue</script></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer TN CorrIds" id="8d46b368-d87e-48cf-b545-408afe7096a0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CorrID1</con:name><con:sourceType>result</con:sourceType><con:sourceStep>GV_Get_CorrelationId_1</con:sourceStep><con:targetType>PortinSDTN1CorrID</con:targetType><con:targetStep>Portin SD Properties</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GV_Test_gotoStepByName" id="c038678f-98e8-4538-a31f-bda8b4e7b246"><con:settings/><con:config><script>

def POSTResponse = testRunner.testCase.getTestStepByName("POST Portin/SD Request 1").httpRequest.response.responseHeaders["#status#"].toString()
log.info "POSTResponse=$POSTResponse"

if ("$POSTResponse" == "[HTTP/1.1 202 Accepted]"){
	log.info "Status Code Found 202 Found.  Goto Get step"
	testRunner.gotoStepByName(["GET v1/admin/portin/{resourceId} after POST 1 Request"])
} else {
	log.info "Status Code Found 202 NOT Found.  Skipping GET step."
	testRunner.gotoStepByName(["DEL /v1/admin/portin/{corrid} Request 1"])
}

// Can also use testRunner.runTestStepByName( "Request 1"):
//if( Math.random() > 0.5 )
//   testRunner.runTestStepByName( "Request 1")
//else
//   testRunner.runTestStepByName( "Request 2")

// do something else
....</script></con:config></con:testStep><con:testStep type="restrequest" name="GET v1/admin/portin/{resourceId} after POST 1 Request" id="a2d0cd3a-5da5-43f5-aa4a-90bfe3da8ea2"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/admin/portin/{corrid}" methodName="GET admin/portin/{corrid}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET v1/admin/portin/{resourceId} after POST 1 Request" id="83acaea0-d85d-400a-b0ea-5e8fa591d15a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/admin/portin/4877501648a944a8afd8324ca384bedc</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="13f05e21-d4c3-4adb-a299-331e1c2c04ff" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="350c11ee-b327-48b2-ad8b-0fb2e48bbc40" name="Contains - body"><con:configuration><token>\{\"correlationId\":\".*\",\"portTn\":\".*\",\"pon\":\".*\",\"deliveryPlatform\":\".*\",\"createTs\":\".*\",\"modifiedTs\":\".*\",\"desiredDueDate\":\".*\",\"portStatus\":\".*\"\}</token><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="corrid" value="${PortinSDTN1CorrID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DEL /v1/admin/portin/{corrid} Request 1" id="750d4617-d476-41a8-873a-5b9df15759a3"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/admin/portin/{corrid}" methodName="DEL admin/portin/{corrid}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DEL /v1/admin/portin/{corrid} Request 1" id="9c0564be-0e25-485d-9b20-275581570e67" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/admin/portin/tempcorrid</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="05aeb625-98fc-4d64-ab48-0fa9bdc800cc" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="corrid" value="${PortinSDTN1CorrID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DEL /v1/admin/portin/{corrid} Manual Corrid Request" id="4a63428b-e5d0-435d-8ebf-e2ca5bd224d6"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/admin/portin/{corrid}" methodName="DEL admin/portin/{corrid}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DEL /v1/admin/portin/{corrid} Manual Corrid Request" id="9c0564be-0e25-485d-9b20-275581570e67" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/admin/portin/tempcorrid</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="05aeb625-98fc-4d64-ab48-0fa9bdc800cc" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="corrid" value="83f4ee5f64c847d49ee2a4bd5589cd0d" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET v1/admin/portin/{resourceId} after DEL 1 Request" id="fa0b797b-a9b8-494f-b909-8e0b2351ef49"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/admin/portin/{corrid}" methodName="GET admin/portin/{corrid}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET v1/admin/portin/{resourceId} after DEL 1 Request" id="83acaea0-d85d-400a-b0ea-5e8fa591d15a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/admin/portin/4877501648a944a8afd8324ca384bedc</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="13f05e21-d4c3-4adb-a299-331e1c2c04ff" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="350c11ee-b327-48b2-ad8b-0fb2e48bbc40" name="Contains - Not found"><con:configuration><token>"responseMessage":"Not found"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="corrid" value="${PortinSDTN1CorrID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_LogPortsterResults" id="e2855678-5342-4c28-a0c2-88e5bf8a237a"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]

log.info "Got Library"

// find the module within the library 
module = library.testCases["PortsterLibrary"].testSteps["PortsterLibrary_Results_Logger"]

log.info "Got Module "

// initialise the library; which places an instance of portsterResultsLogger in the context
module.run(testRunner, context)

log.info "Initialized Library"

// get the instance of portsterResultsLogger from the context.
def dLibrary = context.DMRL

log.info "Got instance of library code from the context.  Log the results."

log.info "GV_LogPortsterResults: testRunner.results:" + testRunner.results

// Log the results
dLibrary.LogPortsterResults(testRunner.results)

log.info "GV_LogPortsterResults Complete"
</script></con:config></con:testStep><con:properties><con:property><con:name>TN1</con:name><con:value>7209842832</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="05840c81-945a-4a34-9db1-7b61fe6ceb1c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Portster v1/admin/phoneNumbers/workingQxReport Bulk Update via file TestCase - cmdline cmds, property step properties access, json iteration" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>S18601
Name:  Portster DB - Import Working Numbers
Description:  
Create POST /portster/v1/admin/phoneNumbers/workingQxReport
Example of the call in INTG:
curl -XPOST http://corp-zzeus.lab.af.qwest.net/portster/v1/admin/phoneNumbers/workingQxReport -T workingQX.csv

Data example in workingQX.csv:
TN, ORDER_NUMBER
2012963001,R23757048444305648
2012963002,R23759037544400525
2012963003,R23759820644478459
2012963004,R23776364045330466
2012963005,R23776364045330466

To verfiy successful load of data:
1) check the log and see:
5 CNUM working QX numbers are successfully recorded in the database. From total 6 lines in the file the 1st line (header) was skipped.

2) (for test in dev) 
ssh root@moniker-masterd1
(password Phot0n$!)
sudo -u postgres psql portster
select * from cnum_qx_working;

All the previous data in this table have to be replaced with the newly submitted data

</con:description><con:settings/><con:testStep type="properties" name="workingQXReportProperties" id="90acd6c2-e2ea-4f1e-b3de-955f8738b02c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>size</con:name><con:value>1718353</con:value></con:property><con:property><con:name>date</con:name><con:value>2017-05-04T23:03:40.575642Z</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep - Update csv file" id="158cf522-1f31-4d79-add1-7563ee158f48"><con:description>Update Portster database.</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>1. 
Update portser database to delete all records in DB.

portster=# \d+ cnum_qx_working_view
                   View "public.cnum_qx_working_view"
     Column     |       Type        | Modifiers | Storage  | Description
----------------+-------------------+-----------+----------+-------------
 tn             | character varying |           | extended |
 is_inventoried | character varying |           | extended |
 order_number   | character varying |           | extended |
View definition:
 SELECT cnum_qx_working.tn,
    cnum_qx_working.is_inventoried,
    cnum_qx_working.order_number
   FROM cnum_qx_working;

portster=# select * from tracking_data ;
       action       | number  |           timestamp
--------------------+---------+-------------------------------
 RATECENTER data    |       0 | 2016-11-22 21:47:19.094048+00
 LATA_NPANXX data   |       0 | 2016-11-22 21:47:19.094048+00
 LATA_LRN data      |       0 | 2016-12-28 22:47:36.649654+00
 PCD_NPANXX_RC data |       0 | 2017-04-02 20:00:11.075011+00
 PCD_RC_SW data     |       0 | 2017-04-02 20:00:11.075011+00
 PCD_SW_LRN data    |       0 | 2017-04-02 20:00:11.075011+00
 PORTABLE_SPID data |     382 | 2017-04-21 21:04:01.54975+00
 cnum_qx_working    | 1718353 | 2017-05-04 19:43:40.955532+00


portster=# delete from cnum_qx_working;
DELETE 1718353
portster=#

2. 
portster=# update tracking_data set number = 1,timestamp = now() where action = 'cnum_qx_working';
UPDATE 1
portster=#

portster=# select * from tracking_data where action = 'cnum_qx_working';
     action      | number |          timestamp
-----------------+--------+------------------------------
 cnum_qx_working |      1 | 2017-05-04 21:10:59.87512+00
</con:expectedResult></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health Initial REST Request" id="0db45acb-6bd1-49e2-aa7c-dc7510326f43"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health Initial REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "size", cnumSize.toString() )
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "date", cnumDate.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").setPropertyValue("size", cnumSize.toString())
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").setPropertyValue("date", cnumDate.toString())
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Good_Small_data" id="17722d8f-022a-4081-9474-0ca37ad8bc15"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_good_data.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
	log.info "FAILED"
	assert false
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="7b93010c-7945-4adb-8dc8-7e81952ca358"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing good data file REST Request" id="55f08425-7583-49a4-8cdf-352eb683fbbc"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing good data file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

/*
assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
assert jsonResponse.checks.checks.id.contains("cnum_qx_working")
log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"
*/

def checksIndex = 0
def checks2Index = 0
def found = false
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				//prevSize = messageExchange.modelItem.testStep.testCase.getPropertyValue( "size")
				//prevDate = messageExchange.modelItem.testStep.testCase.getPropertyValue( "date")
				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize != cnumSize.toString()
				//assert prevDate != cnumDate.toString()
				assert cnumSize == 25
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				found = true
				break
			}			
		}
	}
	if (found)
		break
	
}

if (found)
{
	log.info "Pass." 
	return true
} 
else
	log.info "Fail. cnum_qx_working NOT found " </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Good_Large_file - Run Manually" id="e99c9db8-f89d-4040-9d6b-b5725dc77d3c" disabled="true"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_Large_workingQX.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_Large_workingQX.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep - curl large file &amp; check Portster Log file Headers skipped, file uploaded" id="d4e23f50-aa3a-4be8-811e-5fcea17f485c"><con:description>Check /var/log/portster/portster.log.0 for these events</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Run Manually from command line, file too large for SoapUI to handle:
curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_Large_workingQX.csv'.execute()


Check /var/log/portster/portster.log.0 for similar events from
2017-05-04T19:43:01,703+0000 INFO ... :: POST :: Skipped line cnum_qx_working (header): TN,INVENTORIED,CUST_ORDER_NUM
2017-05-04T19:43:01,709+0000 INFO ... :: POST :: {"method":"POST","uri":"/v1/admin/phoneNumbers/workingQxReport","version":"HTTP_1_0","requestHeaders":{"host":"portster","connection":"close","content-length":"55860777","user-agent":"curl/7.37.1","accept":"*/*","content-type":"multipart/form-data; boundary=------------------------eb9d13d81546ba70"},"statusCode":200,"statusMessage":"OK","responseHeaders":{"x-response-time":"6ms","correlationid":"51daf9aec19048a4a9b8a18a76baa50a"}}
2017-05-04T19:43:01,710+0000 INFO ...   "POST /v1/admin/phoneNumbers/workingQxReport HTTP/1.0" 200 0 "-" "curl/7.37.1"
2017-05-04T19:43:01,710+0000 FINE  ... :: POST :: Closed DB Connection
2017-05-04T19:43:03,596+0000 INFO ... :: POST :: 1718353 cnum_qx_working successfully uploaded and parsed in 1893 ms. From total 1718354 lines, the following 1 lines were skipped: 1st line (header), 0 lines with rejected INVENTORIED.
2017-05-04T19:43:04,957+0000 INFO ... :: POST :: File /tmp/cnum_qx_working.csv is copied to /var/file-uploads on 10.123.122.13</con:expectedResult></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing Good Large file REST Request" id="971f44c9-7f7f-46b5-b2f7-d72a34737691"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing Good Large file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"

				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")

				log.info "cnumSize=" + cnumSize + ", cnumDate=" + cnumDate
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				assert cnumSize == 1718353
				//assert prevSize != cnumSize.toString()
				//assert prevDate != cnumDate.toString()
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Good_too_small data" id="f740eebd-31e2-446f-b56e-369abccd72cf"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_good_data_too_small.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
	log.info "FAILED"
	assert false
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1b" id="8c815e0f-e307-418a-848e-16df5bd8823f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing Good too small file REST Request" id="99765778-72ab-4f32-a60f-4d22fe2816c3"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing Good too small file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	
	/* 
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				
				//prevSize = messageExchange.modelItem.testStep.testCase.getPropertyValue( "size")
				//prevDate = messageExchange.modelItem.testStep.testCase.getPropertyValue( "date")
				//log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "size", cnumSize.toString() )
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "date", cnumDate.toString() )

				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				log.info "Pass." 
				return true
			}			
		}
	}
}

return false
log.info "FAIL.  cnum_qx_working NOT found" </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="manualTestStep" name="Manual TestStep - Check Portster Log file" id="89166e43-fe71-40b5-a579-7a2764e3b334"><con:description>Check /var/log/portster/portster.log.0 for this events</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Check /var/log/portster/portster.log.0 for a similar event from
2017-05-04T18:17:34,132+0000 INFO ... :: POST :: Skipped load: new count for cnum_qx_working 11 &lt; 23</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-unknown_file" id="02044fe7-f412-4204-810d-8f99a3e32929"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
	log.info "FAILED"
	assert false
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 2" id="c33841b0-cf0a-418a-9c66-f3214e4deb66"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing unknown file REST Request" id="80d46629-6c6e-43f9-b184-10ce71295ea6"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing unknown file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				
				//prevSize = messageExchange.modelItem.testStep.testCase.getPropertyValue( "size")
				//prevDate = messageExchange.modelItem.testStep.testCase.getPropertyValue( "date")
				//log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "size", cnumSize.toString() )
				//messageExchange.modelItem.testStep.testCase.setPropertyValue( "date", cnumDate.toString() )

				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Bad_data_extra_columns" id="250a0cc3-5a55-4fbe-94f4-47402b7ccf24"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_data_extra_cols.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3" id="75ef3695-713b-41dc-a2b1-114ae08993bb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing bad extra cols file REST Request" id="e70e3add-3144-4308-ad8e-db6adc427066"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing bad extra cols file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"

				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//ssert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Bad_data_missing_columns" id="d49c481b-6074-4db5-aeb2-dcbb5a6e758d"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_data_missing_cols.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_data_missing_cols.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
	log.info "FAILED"
	assert false
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 4" id="5dd506d4-5fa2-4db8-bc54-bbc6643856c3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing bad missing cols file REST Request" id="cc7dd6c3-49a5-4fc1-8b9c-18ea6e5b6c80"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing bad missing cols file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Bad_data_Bad_Invent_Col" id="e29db61f-7932-4f5a-87b8-72ba86c14b23"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_Inventoried_col.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 5" id="07e9c724-e5a7-4bdb-92d1-2499bf2cd3c3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing bad Invent col file REST Request" id="5dac6f7f-e2b4-498a-a825-eebc3c1a0571"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing bad Invent col file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Bad_data_bad_TNs" id="77bb690c-6138-416c-87a3-1163bea0e3ff"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_data_bad_TNs.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 6" id="096f63f2-f434-4f35-91d9-525eec967a50"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing bad TNs file REST Request" id="b184c3e0-dcb0-4c6c-a693-74a789b0ab64"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing bad TNs file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"

				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 7" id="6cbab80d-68ff-4458-b036-4d2d4c5aab78"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="GV_POST_workingQxNumber_Bulk_via_file-Bad_data_one_line_data_no_cols" id="d5c01ce1-57d2-403a-8bdb-80d78691cae4"><con:settings/><con:config><script>//def workingQxReportResp = ["curl", '--trace-ascii "-"', "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text

def workingQxReportResp 
/*
 * log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = ["curl", "-v", "http://nginx/portster/v1/admin/phoneNumbers/workingQxReport", "-F", "fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv"].execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl --trace-ascii "-" http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp

workingQxReportResp = 'curl -v http://nginx/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute().text
log.info "workingQxReportResp=" + workingQxReportResp
*/
def sout = new StringBuffer(), serr = new StringBuffer()
workingQxReportResp = 'curl -v http://nginxd/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_small_bad_data_one_line_data_no_cols.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "sout=" + sout
log.info "serr=" + serr

if (serr.contains('200 OK'))
{
	log.info "Request returned 200 OK" 
	log.info "PASSED"
	assert true
}
else if (serr.contains('400 Bad Request'))
{
	log.info "Request returned response code: 400 Bad Request" 
	log.info "Body=" + sout
	log.info "FAILED"
	assert false
}
else if (serr.contains("couldn't open file"))
{
	log.info "Request returned: couldn't open file: Users/aa77686/Documents/Moniker_Portster_Info/cnum_test_unknown_file.csv"
	log.info "serr=" + serr
	log.info "PASSED"
	assert true
}
else
{
	log.info "Request returned Unknown response code:"
	log.info "Request returned serr=" + serr
}

/*
 *  Now namually verify DB is updated with this data:
 *  ssh ssh &lt;id>@moniker-masterd1
 *  sudo -u postgres psql portster
 *  select * from tracking_data;  # Verify CNUM working QX numbers entry shows the correct count and time
 *  select * from cnum_qx_working; # Verify correct data is listed.
 *  
 */

/*
workingQxReportResp = 'curl -v http://10.123.122.12/portster/v1/admin/phoneNumbers/workingQxReport -F fileupload=@/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv'.execute()
workingQxReportResp.consumeProcessOutput(sout, serr)
workingQxReportResp.waitForOrKill(1000)
log.info "Using IP addr: sout=" + sout
log.info "Using IP addr: serr=" + serr
*/</script></con:config></con:testStep><con:testStep type="delay" name="Delay 8" id="391006fb-7b8b-4521-a2f7-cdff87d59d57"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="GET /v1/health after POSTing bad 1 line file REST Request" id="af690ddf-4a19-4ee2-a214-6361ca051eb5"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/portin/{service}/{resourceId}" methodName="/v1/portin/{service}/{resourceId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET /v1/health after POSTing bad 1 line file REST Request" id="ba4bf9f3-8a17-4ed4-b113-2e317618eefd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request/><con:originalUri>http://nginx/portster/v1/health</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a135f7ae-d24c-462c-af1e-7f3c67a89177" name="Valid HTTP Status Codes"><con:configuration><codes>200, 503</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8c072cb7-eacc-4b6b-8349-80a62de090c4" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonSlurper 

//def response = messageExchange.getResponse()
def response = messageExchange.responseContent
log.info "response="
log.info response

//def response = context.expand( '${GET_ALL_NUMBERS#Response}' ).toString()
//def AvailablePhoneNumbers, phoneNumber,testnumber,i = 0

//log.info "${response.status.responseCode} ${response.status.responseStatus}"
def slurper = new JsonSlurper()
def jsonResponse = slurper.parseText response

log.info "jsonResponse.checks=" + jsonResponse.checks
log.info "jsonResponse.checks.checks=" + jsonResponse.checks.checks

def checksSize = jsonResponse.checks.size()
log.info "jsonResponse.size()=" + jsonResponse.size() + ", jsonResponse.checks.size()=" + checksSize 
log.info "jsonResponse.checks.id=" + jsonResponse.checks.id
log.info "jsonResponse.checks.checks.id=" + jsonResponse.checks.checks.id

//log.info "jsonResponse.checks[0]=" + jsonResponse.checks[0]
//log.info "jsonResponse.checks[0].id=" + jsonResponse.checks[0].id

//log.info "jsonResponse.checks[1]=" + jsonResponse.checks[1]
//log.info "jsonResponse.checks[1].id=" + jsonResponse.checks[1].id
//log.info "jsonResponse.checks.id=" + jsonResponse.checks.id

assert jsonResponse.checks.id.contains("system")
assert jsonResponse.checks.id.contains("version")
assert jsonResponse.checks.id.contains("portster-database")
assert jsonResponse.checks.id.contains("esr")
assert jsonResponse.checks.id.contains("ovt")
//assert jsonResponse.checks.id.contains("number-manager")
assert jsonResponse.checks.id.contains("lerg-stored-proc")
assert jsonResponse.checks.id.contains("data-feeds")
assert jsonResponse.checks.id.contains("MONIKER")
assert jsonResponse.checks.id.contains("SM")
assert jsonResponse.checks.id.contains("SD")
assert jsonResponse.checks.id.contains("BVOIPWF")
//assert jsonResponse.checks.checks.id.contains("cnum_qx_working")


log.info "jsonResponse.checks.contains() All health status: system, version, portster-database, esr, ovt, number-manager, lerg-stored-proc, data-feeds, MONIKER, SM, SD, BVOIPWF"

def checksIndex = 0
def checks2Index = 0
for (checksIndex = 0; checksIndex &lt; checksSize; checksIndex++)
{
	//log.info "jsonResponse.checks[" + checksIndex + "]=" + jsonResponse.checks[checksIndex]
	log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", status=" + jsonResponse.checks[checksIndex].status
	/*
	if ( jsonResponse.checks[checksIndex].id == "system")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else if ( jsonResponse.checks[checksIndex].id == "version")
	{
		log.info "jsonResponse.checks[" + checksIndex + "].id=" + jsonResponse.checks[checksIndex].id + ", .data.title=" + jsonResponse.checks[checksIndex].data.title + ", .status=" + jsonResponse.checks[checksIndex].status
		assert jsonResponse.checks[checksIndex].status == "UP"
		assert jsonResponse.checks[checksIndex].data.title == "portster"
		assert jsonResponse.checks[checksIndex].data.version != null
		assert jsonResponse.checks[checksIndex].data.build != null
		assert jsonResponse.checks[checksIndex].data.commit != null
		 
	}
	else if ( jsonResponse.checks[checksIndex].id == "portster-database")
	{
		assert jsonResponse.checks[checksIndex].status == "UP"
	}
	else 
	*/
	if ( jsonResponse.checks[checksIndex].id == "data-feeds")
	{
		def checks2Size = jsonResponse.checks[checksIndex].checks.size()
		log.info "jsonResponse.checks[" + checksIndex + "].checks.size()=" + checks2Size
		for (checks2Index = 0; checks2Index &lt; checks2Size; checks2Index++)
		{
			log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status
			if ( jsonResponse.checks[checksIndex].checks[checks2Index].id == "cnum_qx_working")
			{
				def cnumSize = jsonResponse.checks[checksIndex].checks[checks2Index].data.size
				def cnumDate = jsonResponse.checks[checksIndex].checks[checks2Index].data.date
				log.info "jsonResponse.checks[" + checksIndex + "].checks[" + checks2Index + "].id=" + jsonResponse.checks[checksIndex].checks[checks2Index].id + ", .status=" + jsonResponse.checks[checksIndex].checks[checks2Index].status + ", size:" + cnumSize + ", date:" + cnumDate
				assert jsonResponse.checks[checksIndex].checks[checks2Index].status == "UP"
				
				def prevSize = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("size")
				def prevDate = messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties").getPropertyValue("date")
				
				log.info "prevSize=" + prevSize + ", prevDate=" + prevDate
				//assert prevSize == cnumSize.toString()
				//assert prevDate == cnumDate.toString()
				assert cnumSize == 1718353
				
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "size", cnumSize.toString() )
				messageExchange.modelItem.testStep.testCase.getTestStepByName("workingQXReportProperties")setPropertyValue( "date", cnumDate.toString() )
				return true
			}			
		}
	}
}

log.info "Pass." </scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST admin/phoneNumber/workingQxReport, 200 OK" id="527c99ca-a5d0-4d4d-ad0f-7844ea013a40" disabled="true"><con:settings/><con:config service="Portster API" resourcePath="/portster/v1/admin/phoneNumbers/workingQxReport" methodName="POST admin/phoneNumber/workingQxReport" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST admin/phoneNumber/workingQxReport, 200 OK" id="a234e20a-efb1-469c-98f4-179c838a3782" mediaType="multipart/form-data" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://nginx</con:endpoint><con:request>
</con:request><con:originalUri>http://nginx/portster/v1/admin/phoneNumbers/workingQxReport</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25881993-f748-4735-83f8-1364f79f51fe" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:attachment><con:name>cnum_test.csv</con:name><con:contentType>application/octet-stream</con:contentType><con:contentId>cnum_test.csv</con:contentId><con:url>/Users/aa77686/Documents/Moniker_Portster_Info/cnum_test.csv</con:url><con:id>b3dbf4e0-fc68-4bfb-8fb4-4d36803e7436</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GV_Curl_test" id="797a7d3c-b5a7-4f80-8dcc-685e2e280850" disabled="true"><con:settings/><con:config><script>def curlVersionResp = ["curl", "-v", "http://nginx/portster/v1/version"].execute().text
log.info "curlVersionResp=" + curlVersionResp

curlVersionResp = "curl -v http://nginx/portster/v1/version".execute().text
log.info "curlVersionResp=" + curlVersionResp

curlVersionResp = 'curl -v http://nginx/portster/v1/version'.execute().text
log.info "curlVersionResp=" + curlVersionResp

curlVersionResp = 'curl -v http://nginx/portster/v1/version'.execute()
log.info "curlVersionResp=" + curlVersionResp
</script></con:config></con:testStep><con:testStep type="groovy" name="GV_Portster_DB_select_*_from_tracking_data" id="fd7788ec-6287-4765-b11a-cfec00197f92" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql

def  sql = Sql.newInstance(dbPath, dbUserName, dbPassword, dbDriverName);

results = sql.execute( “SELECT * FROM tracking_data WHERE action='CNUM working QX numbers'”);

log.info "SQL query tracking_data 'CNUM working QX numbers' results=" + results</script></con:config></con:testStep><con:testStep type="groovy" name="GV_LogPortsterResults" id="bf9f4daf-ae6f-4e11-bbab-0aa8b48a06cb"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]

log.info "Got Library"

// find the module within the library 
module = library.testCases["PortsterLibrary"].testSteps["PortsterLibrary_Results_Logger"]

log.info "Got Module "

// initialise the library; which places an instance of portsterResultsLogger in the context
module.run(testRunner, context)

log.info "Initialized Library"

// get the instance of portsterResultsLogger from the context.
def dLibrary = context.DMRL

log.info "Got instance of library code from the context.  Log the results."

log.info "GV_LogPortsterResults: testRunner.results:" + testRunner.results

// Log the results
dLibrary.LogPortsterResults(testRunner.results)

log.info "GV_LogPortsterResults Complete"
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/></con:testSuite><con:restMockService id="1a763ef6-6f18-4210-89a2-bab338941c3c" port="8089" path="/" host="macbook-pro.dhcp.intranet" name="REST MockService 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.mock.WsdlMockServiceDesktopPanel$LogListModel@maxSize">100</con:setting></con:settings><con:properties/><con:onRequestScript/><con:restMockAction name="GET /mockServer/version" method="GET" resourcePath="/mockServer/version" id="408d5400-33e0-4b48-8c4a-8595c84c6184"><con:settings/><con:defaultResponse>GET Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath/><con:response name="GET Response 1" id="f35024b1-27df-4e1c-b8a1-c39656aa64d2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "Title": "wjbMockster",
   "Version": "1.0.0",
   "Build": "1",
   "Commit": "1111111111111"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="POST /mockServer/version" method="POST" resourcePath="/mockServer/version" id="f2344e82-ae97-4c64-89e9-ec5852cf3900"><con:settings/><con:defaultResponse>POST Response wjbMockster1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}

// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("wjbMockster1") )
{
    // return the name of the response you want to dispatch
    log.info "wjbMockster1 Found"
    return "POST Response wjbMockster1"
}
else if( requestBody.contains("wjbMockster2") )
{
	log.info "wjbMockster2  Found"
	return "POST Response wjbMockster2"
}
else 
{
	log.info "No wjbMockster Found"
	return "POST Response Error"
}</con:dispatchPath><con:response name="POST Response wjbMockster1" id="becf1b52-2f53-4051-8da7-967155a90c60" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script/><con:responseContent>{
   "Title": "wjbMockster1",
   "Version": "1.1.1",
   "Build": "1",
   "Commit": "111"
}</con:responseContent><con:header><con:name>content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="POST Response wjbMockster2" id="1709fef0-913d-4b27-b57f-772498d23f05" httpResponseStatus="200"><con:settings/><con:responseContent>{
   "Title": "wjbMockster2",
   "Version": "1.1.2",
   "Build": "2",
   "Commit": "2222222222"
}</con:responseContent></con:response><con:response name="POST Response Error" id="71c81821-7b05-4d82-8f64-6c1dc05927ca" httpResponseStatus="400"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties><con:property><con:name>totalCount</con:name><con:value>0</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>